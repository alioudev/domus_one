/* The following code was generated by JFlex 1.7.0 */

// Specification JFlex
import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>base_lex2.lex</tt>
 */
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\46\1\43\1\73\1\73\1\73\22\0\1\45\1\71\1\42"+
    "\5\0\1\26\1\27\2\0\1\32\1\0\1\33\1\44\12\40\1\34"+
    "\1\35\1\47\1\36\1\37\2\0\1\54\1\41\1\62\1\57\1\56"+
    "\1\67\1\53\1\41\1\65\2\41\1\63\1\55\1\66\1\52\1\50"+
    "\1\41\1\51\1\61\1\64\1\60\5\41\4\0\1\21\1\0\1\4"+
    "\1\25\1\2\1\20\1\1\1\13\1\7\1\15\1\5\1\23\1\41"+
    "\1\3\1\17\1\14\1\11\1\22\1\41\1\6\1\24\1\12\1\16"+
    "\1\10\1\41\1\70\2\41\1\30\1\72\1\31\7\0\1\73\u1fa2\0"+
    "\1\73\1\73\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\15\2\1\3\2\2\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\2\20\1\1\1\21\20\2\1\22\12\2\1\23"+
    "\1\24\2\0\1\25\4\0\1\2\1\26\26\2\1\27"+
    "\12\2\7\0\2\2\1\30\25\2\1\31\10\2\7\0"+
    "\10\2\1\32\13\2\1\26\1\2\1\33\7\2\1\34"+
    "\7\0\6\2\1\26\5\2\1\35\5\2\1\36\5\2"+
    "\7\0\5\2\1\35\10\2\1\35\1\37\1\40\2\2"+
    "\7\0\1\41\3\2\1\42\6\2\1\43\7\0\12\2"+
    "\5\0\1\44\7\2\1\45\2\0\1\46\2\0\5\2"+
    "\4\0\4\2\4\0\3\2\4\0\1\2\1\47\7\0"+
    "\1\2\12\0\1\2\12\0\1\50\5\0\1\51\4\0"+
    "\1\52\45\0\1\53\3\0\1\54\2\0\1\55\1\56"+
    "\1\0\1\57\1\60\1\0\1\61\1\62";

  private static int [] zzUnpackAction() {
    int [] result = new int[414];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\u01a4"+
    "\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c\0\u0348\0\u01a4"+
    "\0\u0384\0\u03c0\0\74\0\74\0\74\0\74\0\74\0\74"+
    "\0\74\0\74\0\u03fc\0\74\0\u0438\0\u0474\0\74\0\u04b0"+
    "\0\u04ec\0\74\0\u0528\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654"+
    "\0\u0690\0\u06cc\0\u0708\0\u0744\0\u0780\0\u07bc\0\u07f8\0\u0834"+
    "\0\u0870\0\u08ac\0\u01a4\0\u08e8\0\u0924\0\u0960\0\u099c\0\u09d8"+
    "\0\u0a14\0\u0a50\0\u0a8c\0\u0ac8\0\u0b04\0\u0b40\0\74\0\u0b7c"+
    "\0\u0474\0\74\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c\0\u0ca8\0\u01a4"+
    "\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c\0\u0e88"+
    "\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4\0\u0ff0\0\u102c\0\u1068"+
    "\0\u10a4\0\u10e0\0\u111c\0\u1158\0\u1194\0\u11d0\0\u01a4\0\u120c"+
    "\0\u1248\0\u1284\0\u12c0\0\u12fc\0\u1338\0\u1374\0\u13b0\0\u13ec"+
    "\0\u1428\0\u1464\0\u14a0\0\u14dc\0\u1518\0\u1554\0\u1590\0\u15cc"+
    "\0\u1608\0\u1644\0\u01a4\0\u1680\0\u16bc\0\u16f8\0\u1734\0\u1770"+
    "\0\u17ac\0\u17e8\0\u1824\0\u1860\0\u189c\0\u18d8\0\u1914\0\u1950"+
    "\0\u198c\0\u19c8\0\u1a04\0\u1a40\0\u1a7c\0\u1ab8\0\u1af4\0\u1b30"+
    "\0\u01a4\0\u1b6c\0\u1ba8\0\u1be4\0\u1c20\0\u1c5c\0\u1c98\0\u1cd4"+
    "\0\u1d10\0\u1d4c\0\u1d88\0\u1dc4\0\u1e00\0\u1e3c\0\u1e78\0\u1eb4"+
    "\0\u1ef0\0\u1f2c\0\u1f68\0\u1fa4\0\u1fe0\0\u201c\0\u2058\0\u2094"+
    "\0\u01a4\0\u20d0\0\u210c\0\u2148\0\u2184\0\u21c0\0\u21fc\0\u2238"+
    "\0\u2274\0\u22b0\0\u22ec\0\u2328\0\u2238\0\u2364\0\u01a4\0\u23a0"+
    "\0\u23dc\0\u2418\0\u2454\0\u2490\0\u24cc\0\u2508\0\u01a4\0\u2544"+
    "\0\u2580\0\u25bc\0\u25f8\0\u2634\0\u2670\0\u26ac\0\u26e8\0\u2724"+
    "\0\u2760\0\u279c\0\u27d8\0\u2814\0\u2850\0\u288c\0\u28c8\0\u2904"+
    "\0\u2940\0\u297c\0\u29b8\0\u29f4\0\u2a30\0\u2a6c\0\u2aa8\0\u2ae4"+
    "\0\u01a4\0\u2b20\0\u2b5c\0\u2b98\0\u2bd4\0\u2c10\0\u2c4c\0\u2c88"+
    "\0\u2cc4\0\u2d00\0\u2d3c\0\u2d78\0\u2db4\0\u2df0\0\u2e2c\0\u2e68"+
    "\0\u2ea4\0\u2ee0\0\u2f1c\0\u2f58\0\u2f94\0\u2fd0\0\u300c\0\u3048"+
    "\0\u3084\0\u30c0\0\u30fc\0\u01a4\0\u01a4\0\u01a4\0\u3138\0\u3174"+
    "\0\u31b0\0\u31ec\0\u3228\0\u3264\0\u32a0\0\u32dc\0\u3318\0\u3354"+
    "\0\u3390\0\u33cc\0\u3408\0\u01a4\0\u3444\0\u3480\0\u34bc\0\u34f8"+
    "\0\u3534\0\u3570\0\u01a4\0\u35ac\0\u35e8\0\u3624\0\u3660\0\u369c"+
    "\0\u36d8\0\u3714\0\u3750\0\u378c\0\u37c8\0\u3804\0\u3840\0\u387c"+
    "\0\u38b8\0\u38f4\0\u3930\0\u396c\0\u39a8\0\u39e4\0\u3a20\0\u3a5c"+
    "\0\u3a98\0\74\0\u3ad4\0\u3b10\0\u3b4c\0\u3b88\0\u3bc4\0\u3c00"+
    "\0\u3c3c\0\u01a4\0\u3c78\0\u3cb4\0\74\0\u3cf0\0\u3d2c\0\u3d68"+
    "\0\u3da4\0\u3de0\0\u3e1c\0\u3e58\0\u3e94\0\u3ed0\0\u3f0c\0\u3f48"+
    "\0\u3f84\0\u3fc0\0\u3ffc\0\u4038\0\u4074\0\u40b0\0\u40ec\0\u4128"+
    "\0\u4164\0\u41a0\0\u41dc\0\u4218\0\u4254\0\u4290\0\u42cc\0\u4308"+
    "\0\u01a4\0\u4344\0\u4380\0\u43bc\0\u43f8\0\u4434\0\u4470\0\u44ac"+
    "\0\u44e8\0\u4524\0\u4560\0\u459c\0\u45d8\0\u4614\0\u4650\0\u468c"+
    "\0\u46c8\0\u4704\0\u4740\0\u477c\0\u47b8\0\u47f4\0\u4830\0\u486c"+
    "\0\u48a8\0\u48e4\0\u4920\0\u495c\0\u4998\0\u49d4\0\u01a4\0\u4a10"+
    "\0\u4a4c\0\u4a88\0\u4ac4\0\u4b00\0\74\0\u4b3c\0\u4b78\0\u4bb4"+
    "\0\u4bf0\0\74\0\u4c2c\0\u4c68\0\u4ca4\0\u4ce0\0\u4d1c\0\u4d58"+
    "\0\u4d94\0\u4dd0\0\u4e0c\0\u4e48\0\u4e84\0\u4ec0\0\u4efc\0\u4f38"+
    "\0\u4f74\0\u4fb0\0\u4fec\0\u5028\0\u5064\0\u50a0\0\u50dc\0\u5118"+
    "\0\u5154\0\u5190\0\u51cc\0\u5208\0\u5244\0\u5280\0\u52bc\0\u52f8"+
    "\0\u5334\0\u5370\0\u53ac\0\u53e8\0\u5424\0\u5460\0\u549c\0\74"+
    "\0\u54d8\0\u5514\0\u5550\0\74\0\u558c\0\u55c8\0\74\0\74"+
    "\0\u5604\0\74\0\74\0\u5640\0\74\0\74";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[414];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\2\10\1\11"+
    "\1\12\1\13\1\14\1\10\1\15\1\10\1\16\1\17"+
    "\1\20\1\21\1\10\1\22\1\10\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\10\1\36\1\37\1\2\1\37\1\40\1\41\21\10"+
    "\1\42\1\37\76\0\1\10\1\43\7\10\1\44\13\10"+
    "\12\0\2\10\6\0\20\10\1\45\4\0\3\10\1\46"+
    "\10\10\1\47\10\10\12\0\2\10\6\0\21\10\4\0"+
    "\3\10\1\50\21\10\12\0\2\10\6\0\21\10\4\0"+
    "\2\10\1\51\12\10\1\52\5\10\1\53\1\10\12\0"+
    "\2\10\6\0\21\10\4\0\13\10\1\54\11\10\12\0"+
    "\2\10\6\0\21\10\4\0\25\10\12\0\2\10\6\0"+
    "\21\10\4\0\4\10\1\55\3\10\1\56\14\10\12\0"+
    "\2\10\6\0\21\10\4\0\5\10\1\57\7\10\1\60"+
    "\7\10\12\0\2\10\6\0\21\10\4\0\1\61\2\10"+
    "\1\62\3\10\1\63\15\10\12\0\2\10\6\0\21\10"+
    "\4\0\1\64\2\10\1\65\17\10\1\66\1\10\12\0"+
    "\2\10\6\0\21\10\4\0\4\10\1\67\20\10\12\0"+
    "\2\10\6\0\21\10\4\0\1\70\7\10\1\71\14\10"+
    "\12\0\2\10\6\0\21\10\4\0\1\72\24\10\12\0"+
    "\2\10\6\0\21\10\4\0\5\10\1\73\2\10\1\74"+
    "\14\10\12\0\2\10\6\0\21\10\4\0\1\75\3\10"+
    "\1\76\20\10\12\0\2\10\6\0\21\10\41\0\1\77"+
    "\5\0\1\100\67\0\1\35\33\0\42\101\1\102\1\0"+
    "\30\101\43\0\1\37\74\0\1\103\3\0\1\104\6\0"+
    "\1\105\1\0\1\106\13\0\2\10\1\107\5\10\1\110"+
    "\14\10\12\0\2\10\6\0\21\10\4\0\1\111\2\10"+
    "\1\112\21\10\12\0\2\10\6\0\21\10\4\0\1\113"+
    "\24\10\12\0\2\10\6\0\21\10\4\0\12\10\1\114"+
    "\12\10\12\0\2\10\6\0\21\10\4\0\3\10\1\115"+
    "\21\10\12\0\2\10\6\0\21\10\4\0\7\10\1\116"+
    "\15\10\12\0\2\10\6\0\21\10\4\0\2\10\1\117"+
    "\1\120\4\10\1\121\14\10\12\0\2\10\6\0\21\10"+
    "\4\0\11\10\1\122\13\10\12\0\2\10\6\0\21\10"+
    "\4\0\23\10\1\123\1\10\12\0\2\10\6\0\21\10"+
    "\4\0\11\10\1\124\13\10\12\0\2\10\6\0\21\10"+
    "\4\0\17\10\1\125\5\10\12\0\2\10\6\0\21\10"+
    "\4\0\2\10\1\126\22\10\12\0\2\10\6\0\21\10"+
    "\4\0\17\10\1\127\5\10\12\0\2\10\6\0\21\10"+
    "\4\0\7\10\1\130\15\10\12\0\2\10\6\0\21\10"+
    "\4\0\2\10\1\131\22\10\12\0\2\10\6\0\21\10"+
    "\4\0\16\10\1\132\5\10\1\133\12\0\2\10\6\0"+
    "\21\10\4\0\5\10\1\134\5\10\1\135\11\10\12\0"+
    "\2\10\6\0\21\10\4\0\4\10\1\136\20\10\12\0"+
    "\2\10\6\0\21\10\4\0\4\10\1\137\20\10\12\0"+
    "\2\10\6\0\21\10\4\0\12\10\1\140\12\10\12\0"+
    "\2\10\6\0\21\10\4\0\23\10\1\141\1\10\12\0"+
    "\2\10\6\0\21\10\4\0\24\10\1\142\12\0\2\10"+
    "\6\0\21\10\4\0\12\10\1\143\3\10\1\144\6\10"+
    "\12\0\2\10\6\0\21\10\4\0\10\10\1\145\14\10"+
    "\12\0\2\10\6\0\21\10\4\0\5\10\1\146\7\10"+
    "\1\147\7\10\12\0\2\10\6\0\21\10\4\0\1\10"+
    "\1\150\23\10\12\0\2\10\6\0\21\10\4\0\13\10"+
    "\1\151\11\10\12\0\2\10\6\0\21\10\47\0\1\152"+
    "\77\0\1\153\6\0\1\154\1\0\1\155\63\0\1\156"+
    "\100\0\1\157\77\0\1\160\12\0\3\10\1\161\21\10"+
    "\12\0\2\10\6\0\21\10\4\0\4\10\1\162\20\10"+
    "\12\0\2\10\6\0\21\10\4\0\11\10\1\163\13\10"+
    "\12\0\2\10\6\0\21\10\4\0\1\10\1\164\23\10"+
    "\12\0\2\10\6\0\21\10\4\0\1\165\24\10\12\0"+
    "\2\10\6\0\21\10\4\0\15\10\1\166\7\10\12\0"+
    "\2\10\6\0\21\10\4\0\1\167\24\10\12\0\2\10"+
    "\6\0\21\10\4\0\15\10\1\170\7\10\12\0\2\10"+
    "\6\0\21\10\4\0\5\10\1\171\17\10\12\0\2\10"+
    "\6\0\21\10\4\0\5\10\1\172\17\10\12\0\2\10"+
    "\6\0\21\10\4\0\5\10\1\173\17\10\12\0\2\10"+
    "\6\0\21\10\4\0\10\10\1\174\14\10\12\0\2\10"+
    "\6\0\21\10\4\0\1\175\24\10\12\0\2\10\6\0"+
    "\21\10\4\0\1\176\24\10\12\0\2\10\6\0\21\10"+
    "\4\0\1\177\24\10\12\0\2\10\6\0\21\10\4\0"+
    "\4\10\1\200\20\10\12\0\2\10\6\0\21\10\4\0"+
    "\1\201\4\10\1\202\17\10\12\0\2\10\6\0\21\10"+
    "\4\0\1\203\24\10\12\0\2\10\6\0\21\10\4\0"+
    "\4\10\1\204\20\10\12\0\2\10\6\0\21\10\4\0"+
    "\2\10\1\205\22\10\12\0\2\10\6\0\21\10\4\0"+
    "\16\10\1\206\6\10\12\0\2\10\6\0\21\10\4\0"+
    "\1\207\24\10\12\0\2\10\6\0\21\10\4\0\5\10"+
    "\1\210\3\10\1\211\13\10\12\0\2\10\6\0\21\10"+
    "\4\0\4\10\1\63\20\10\12\0\2\10\6\0\21\10"+
    "\4\0\23\10\1\212\1\10\12\0\2\10\6\0\21\10"+
    "\4\0\4\10\1\213\20\10\12\0\2\10\6\0\21\10"+
    "\4\0\4\10\1\214\20\10\12\0\2\10\6\0\21\10"+
    "\4\0\4\10\1\110\20\10\12\0\2\10\6\0\21\10"+
    "\4\0\6\10\1\215\16\10\12\0\2\10\6\0\21\10"+
    "\4\0\11\10\1\216\13\10\12\0\2\10\6\0\21\10"+
    "\4\0\5\10\1\217\17\10\12\0\2\10\6\0\21\10"+
    "\4\0\14\10\1\220\10\10\12\0\2\10\6\0\21\10"+
    "\4\0\10\10\1\221\14\10\12\0\2\10\6\0\21\10"+
    "\50\0\1\222\77\0\1\223\100\0\1\224\77\0\1\225"+
    "\63\0\1\226\103\0\1\227\67\0\1\230\16\0\4\10"+
    "\1\231\20\10\12\0\2\10\6\0\21\10\4\0\13\10"+
    "\1\232\11\10\12\0\2\10\6\0\21\10\4\0\15\10"+
    "\1\233\7\10\12\0\2\10\6\0\21\10\4\0\11\10"+
    "\1\234\13\10\12\0\2\10\6\0\21\10\4\0\12\10"+
    "\1\235\12\10\12\0\2\10\6\0\21\10\4\0\20\10"+
    "\1\236\4\10\12\0\2\10\6\0\21\10\4\0\16\10"+
    "\1\237\6\10\12\0\2\10\6\0\21\10\4\0\16\10"+
    "\1\240\6\10\12\0\2\10\6\0\21\10\4\0\23\10"+
    "\1\241\1\10\12\0\2\10\6\0\21\10\4\0\1\242"+
    "\24\10\12\0\2\10\6\0\21\10\4\0\1\10\1\243"+
    "\23\10\12\0\2\10\6\0\21\10\4\0\5\10\1\244"+
    "\17\10\12\0\2\10\6\0\21\10\4\0\10\10\1\245"+
    "\14\10\12\0\2\10\6\0\21\10\4\0\11\10\1\63"+
    "\13\10\12\0\2\10\6\0\21\10\4\0\13\10\1\246"+
    "\11\10\12\0\2\10\6\0\21\10\4\0\5\10\1\247"+
    "\17\10\12\0\2\10\6\0\21\10\4\0\4\10\1\250"+
    "\20\10\12\0\2\10\6\0\21\10\4\0\1\10\1\251"+
    "\17\10\1\252\3\10\12\0\2\10\6\0\21\10\4\0"+
    "\23\10\1\253\1\10\12\0\2\10\6\0\21\10\4\0"+
    "\1\254\24\10\12\0\2\10\6\0\21\10\4\0\1\255"+
    "\24\10\12\0\2\10\6\0\21\10\4\0\11\10\1\256"+
    "\13\10\12\0\2\10\6\0\21\10\4\0\1\257\24\10"+
    "\12\0\2\10\6\0\21\10\4\0\3\10\1\260\21\10"+
    "\12\0\2\10\6\0\21\10\4\0\2\10\1\261\22\10"+
    "\12\0\2\10\6\0\21\10\4\0\13\10\1\262\11\10"+
    "\12\0\2\10\6\0\21\10\4\0\5\10\1\263\17\10"+
    "\12\0\2\10\6\0\21\10\4\0\3\10\1\264\21\10"+
    "\12\0\2\10\6\0\21\10\4\0\11\10\1\265\13\10"+
    "\12\0\2\10\6\0\21\10\4\0\1\266\24\10\12\0"+
    "\2\10\6\0\21\10\4\0\13\10\1\267\11\10\12\0"+
    "\2\10\6\0\21\10\10\0\1\270\36\0\1\100\101\0"+
    "\1\271\103\0\1\272\67\0\1\273\70\0\1\274\103\0"+
    "\1\275\76\0\1\276\6\0\5\10\1\277\17\10\12\0"+
    "\2\10\6\0\21\10\4\0\11\10\1\110\5\10\1\300"+
    "\5\10\12\0\2\10\6\0\21\10\4\0\11\10\1\301"+
    "\13\10\12\0\2\10\6\0\21\10\4\0\4\10\1\302"+
    "\20\10\12\0\2\10\6\0\21\10\4\0\12\10\1\277"+
    "\12\10\12\0\2\10\6\0\21\10\4\0\2\10\1\303"+
    "\4\10\1\304\15\10\12\0\2\10\6\0\21\10\4\0"+
    "\1\305\24\10\12\0\2\10\6\0\21\10\4\0\1\63"+
    "\24\10\12\0\2\10\6\0\21\10\4\0\20\10\1\306"+
    "\4\10\12\0\2\10\6\0\21\10\4\0\4\10\1\307"+
    "\20\10\12\0\2\10\6\0\21\10\4\0\5\10\1\310"+
    "\17\10\12\0\2\10\6\0\21\10\4\0\20\10\1\311"+
    "\4\10\12\0\2\10\6\0\21\10\4\0\3\10\1\312"+
    "\21\10\12\0\2\10\6\0\21\10\4\0\11\10\1\110"+
    "\13\10\12\0\2\10\6\0\21\10\4\0\5\10\1\313"+
    "\17\10\12\0\2\10\6\0\21\10\4\0\10\10\1\314"+
    "\14\10\12\0\2\10\6\0\21\10\4\0\14\10\1\315"+
    "\10\10\12\0\2\10\6\0\21\10\4\0\1\316\24\10"+
    "\12\0\2\10\6\0\21\10\4\0\11\10\1\317\13\10"+
    "\12\0\2\10\6\0\21\10\4\0\5\10\1\240\17\10"+
    "\12\0\2\10\6\0\21\10\4\0\6\10\1\320\16\10"+
    "\12\0\2\10\6\0\21\10\4\0\1\321\24\10\12\0"+
    "\2\10\6\0\21\10\4\0\4\10\1\322\20\10\12\0"+
    "\2\10\6\0\21\10\4\0\3\10\1\323\21\10\12\0"+
    "\2\10\6\0\21\10\4\0\4\10\1\324\20\10\12\0"+
    "\2\10\6\0\21\10\4\0\10\10\1\325\14\10\12\0"+
    "\2\10\6\0\21\10\4\0\20\10\1\326\4\10\12\0"+
    "\2\10\6\0\21\10\23\0\1\327\126\0\1\330\103\0"+
    "\1\331\76\0\1\332\56\0\1\333\76\0\1\334\73\0"+
    "\1\335\20\0\3\10\1\336\21\10\12\0\2\10\6\0"+
    "\21\10\4\0\5\10\1\337\17\10\12\0\2\10\6\0"+
    "\21\10\4\0\1\340\24\10\12\0\2\10\6\0\21\10"+
    "\4\0\1\256\24\10\12\0\2\10\6\0\21\10\4\0"+
    "\4\10\1\341\20\10\12\0\2\10\6\0\21\10\4\0"+
    "\3\10\1\342\21\10\12\0\2\10\6\0\21\10\4\0"+
    "\5\10\1\343\17\10\12\0\2\10\6\0\21\10\4\0"+
    "\3\10\1\344\21\10\12\0\2\10\6\0\21\10\4\0"+
    "\1\345\24\10\12\0\2\10\6\0\21\10\4\0\15\10"+
    "\1\346\7\10\12\0\2\10\6\0\21\10\4\0\21\10"+
    "\1\347\3\10\12\0\2\10\6\0\21\10\4\0\11\10"+
    "\1\350\13\10\12\0\2\10\6\0\21\10\4\0\20\10"+
    "\1\351\4\10\12\0\2\10\6\0\21\10\4\0\16\10"+
    "\1\352\6\10\12\0\2\10\6\0\21\10\4\0\10\10"+
    "\1\353\14\10\12\0\2\10\6\0\21\10\4\0\5\10"+
    "\1\354\17\10\12\0\2\10\6\0\21\10\4\0\11\10"+
    "\1\261\13\10\12\0\2\10\6\0\21\10\4\0\1\355"+
    "\24\10\12\0\2\10\6\0\21\10\4\0\5\10\1\356"+
    "\17\10\12\0\2\10\6\0\21\10\4\0\16\10\1\357"+
    "\6\10\12\0\2\10\6\0\21\10\4\0\2\10\1\63"+
    "\22\10\12\0\2\10\6\0\21\10\4\0\15\10\1\360"+
    "\7\10\12\0\2\10\6\0\21\10\4\0\2\10\1\303"+
    "\22\10\12\0\2\10\6\0\21\10\4\0\1\361\143\0"+
    "\1\362\76\0\1\363\73\0\1\364\73\0\1\365\70\0"+
    "\1\366\73\0\1\367\23\0\6\10\1\240\16\10\12\0"+
    "\2\10\6\0\21\10\4\0\1\354\24\10\12\0\2\10"+
    "\6\0\21\10\4\0\5\10\1\370\17\10\12\0\2\10"+
    "\6\0\21\10\4\0\13\10\1\336\11\10\12\0\2\10"+
    "\6\0\21\10\4\0\4\10\1\371\20\10\12\0\2\10"+
    "\6\0\21\10\4\0\20\10\1\372\4\10\12\0\2\10"+
    "\6\0\21\10\4\0\21\10\1\373\3\10\12\0\2\10"+
    "\6\0\21\10\4\0\5\10\1\374\17\10\12\0\2\10"+
    "\6\0\21\10\4\0\21\10\1\375\3\10\12\0\2\10"+
    "\6\0\21\10\4\0\5\10\1\376\17\10\12\0\2\10"+
    "\6\0\21\10\4\0\1\377\24\10\12\0\2\10\6\0"+
    "\21\10\4\0\21\10\1\u0100\3\10\12\0\2\10\6\0"+
    "\21\10\4\0\16\10\1\u0101\6\10\12\0\2\10\6\0"+
    "\21\10\4\0\13\10\1\261\11\10\12\0\2\10\6\0"+
    "\21\10\4\0\16\10\1\u0102\6\10\12\0\2\10\6\0"+
    "\21\10\4\0\11\10\1\u0103\13\10\12\0\2\10\6\0"+
    "\21\10\17\0\1\u0104\133\0\1\u0105\70\0\1\u0106\73\0"+
    "\1\u0107\77\0\1\u0108\72\0\1\u0109\104\0\1\u010a\7\0"+
    "\20\10\1\u010b\4\10\12\0\2\10\6\0\21\10\4\0"+
    "\23\10\1\u010c\1\10\12\0\2\10\6\0\21\10\4\0"+
    "\1\u010d\20\10\1\u0100\3\10\12\0\2\10\6\0\21\10"+
    "\4\0\21\10\1\u010e\3\10\12\0\2\10\6\0\21\10"+
    "\4\0\11\10\1\u010f\13\10\12\0\2\10\6\0\21\10"+
    "\4\0\10\10\1\u0110\14\10\12\0\2\10\6\0\21\10"+
    "\4\0\15\10\1\u0111\7\10\12\0\2\10\6\0\21\10"+
    "\4\0\3\10\1\u0112\21\10\12\0\2\10\6\0\21\10"+
    "\4\0\3\10\1\u0113\21\10\12\0\2\10\6\0\21\10"+
    "\4\0\1\u0114\24\10\12\0\2\10\6\0\21\10\15\0"+
    "\1\37\136\0\1\u0115\72\0\1\u0116\104\0\1\u0117\63\0"+
    "\1\u0118\102\0\1\u0119\61\0\1\u011a\22\0\23\10\1\u011b"+
    "\1\10\12\0\2\10\6\0\21\10\4\0\23\10\1\u011c"+
    "\1\10\12\0\2\10\6\0\21\10\4\0\1\10\1\u011d"+
    "\23\10\12\0\2\10\6\0\21\10\4\0\3\10\1\u011e"+
    "\21\10\12\0\2\10\6\0\21\10\4\0\1\u011f\24\10"+
    "\12\0\2\10\6\0\21\10\4\0\22\10\1\63\2\10"+
    "\12\0\2\10\6\0\21\10\4\0\5\10\1\63\17\10"+
    "\12\0\2\10\6\0\21\10\4\0\5\10\1\u0120\17\10"+
    "\12\0\2\10\6\0\21\10\4\0\13\10\1\u0121\11\10"+
    "\12\0\2\10\6\0\21\10\4\0\5\10\1\u0122\17\10"+
    "\12\0\2\10\6\0\21\10\60\0\1\u0123\102\0\1\u0124"+
    "\61\0\1\u0125\77\0\1\u0126\102\0\1\u0127\7\0\1\10"+
    "\1\u0128\23\10\12\0\2\10\6\0\21\10\4\0\1\u0129"+
    "\24\10\12\0\2\10\6\0\21\10\4\0\10\10\1\354"+
    "\14\10\12\0\2\10\6\0\21\10\4\0\5\10\1\u012a"+
    "\17\10\12\0\2\10\6\0\21\10\4\0\15\10\1\u012b"+
    "\7\10\12\0\2\10\6\0\21\10\4\0\11\10\1\u012c"+
    "\13\10\12\0\2\10\6\0\21\10\4\0\17\10\1\261"+
    "\5\10\12\0\2\10\6\0\21\10\61\0\1\u012d\102\0"+
    "\1\u012e\27\0\1\u012f\124\0\1\u0130\22\0\1\u0131\24\10"+
    "\12\0\2\10\6\0\21\10\4\0\2\10\1\u0132\22\10"+
    "\12\0\2\10\6\0\21\10\4\0\1\u0133\24\10\12\0"+
    "\2\10\6\0\21\10\4\0\5\10\1\321\17\10\12\0"+
    "\2\10\6\0\21\10\4\0\4\10\1\u0134\20\10\12\0"+
    "\2\10\6\0\21\10\24\0\1\u0135\124\0\1\u0136\100\0"+
    "\1\u0137\102\0\1\u0138\6\0\13\10\1\u0139\11\10\12\0"+
    "\2\10\6\0\21\10\4\0\2\10\1\240\22\10\12\0"+
    "\2\10\6\0\21\10\4\0\4\10\1\u013a\20\10\12\0"+
    "\2\10\6\0\21\10\4\0\1\u013b\24\10\12\0\2\10"+
    "\6\0\21\10\62\0\1\u013c\102\0\1\u013d\57\0\1\u013e"+
    "\42\0\1\u013f\53\0\3\10\1\u0140\21\10\12\0\2\10"+
    "\6\0\21\10\4\0\2\10\1\u0141\22\10\12\0\2\10"+
    "\6\0\21\10\4\0\2\10\1\354\22\10\12\0\2\10"+
    "\6\0\21\10\55\0\1\u0142\42\0\1\u0143\127\0\1\u0144"+
    "\72\0\1\u0145\4\0\1\u0146\1\u0147\2\0\1\u0148\7\0"+
    "\5\10\1\u0149\17\10\12\0\2\10\6\0\21\10\60\0"+
    "\1\u014a\72\0\1\u014b\4\0\1\u014c\1\u014d\2\0\1\u014e"+
    "\66\0\1\u014f\63\0\1\u0150\105\0\1\u0151\63\0\1\u0152"+
    "\107\0\1\u0153\6\0\4\10\1\u0154\20\10\12\0\2\10"+
    "\6\0\21\10\63\0\1\u0155\63\0\1\u0156\105\0\1\u0157"+
    "\63\0\1\u0158\107\0\1\u0159\66\0\1\u015a\62\0\1\u015b"+
    "\101\0\1\u015c\72\0\1\u015d\102\0\1\u015e\10\0\10\10"+
    "\1\u015f\14\10\12\0\2\10\6\0\21\10\64\0\1\u0160"+
    "\62\0\1\u0161\101\0\1\u0162\72\0\1\u0163\102\0\1\u0164"+
    "\46\0\1\u0165\110\0\1\u0166\105\0\1\u0167\62\0\1\u0168"+
    "\74\0\1\u0169\54\0\1\u016a\110\0\1\u016b\105\0\1\u016c"+
    "\62\0\1\u016d\74\0\1\u016e\66\0\1\u016f\76\0\1\u0170"+
    "\73\0\1\u0171\70\0\1\u0172\73\0\1\u0173\76\0\1\u0174"+
    "\73\0\1\u0175\70\0\1\u0176\100\0\1\u0177\66\0\1\u0178"+
    "\110\0\1\u0179\74\0\1\u017a\62\0\1\u017b\66\0\1\u017c"+
    "\110\0\1\u017d\74\0\1\u017e\71\0\1\u017f\73\0\1\u0180"+
    "\65\0\1\u0181\70\0\1\u0182\104\0\1\u0183\73\0\1\u0184"+
    "\65\0\1\u0185\70\0\1\u0186\102\0\1\u0187\75\0\1\u0188"+
    "\64\0\1\u0189\77\0\1\u018a\74\0\1\u018b\75\0\1\u018c"+
    "\64\0\1\u018d\77\0\1\u018e\72\0\1\u018f\51\0\1\u0190"+
    "\115\0\1\u0191\70\0\1\u0192\76\0\1\u0193\51\0\1\u0194"+
    "\115\0\1\u0195\70\0\1\u0196\54\0\1\u0197\73\0\1\u0198"+
    "\115\0\1\u0199\51\0\1\u019a\73\0\1\u019b\115\0\1\u019c"+
    "\51\0\1\u019d\73\0\1\u019e\34\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[22140];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\20\1\10\11\1\1\1\11\2\1\1\11"+
    "\2\1\1\11\34\1\1\11\2\0\1\11\4\0\43\1"+
    "\7\0\41\1\7\0\37\1\7\0\30\1\7\0\23\1"+
    "\7\0\14\1\7\0\12\1\5\0\1\11\10\1\2\0"+
    "\1\11\2\0\5\1\4\0\4\1\4\0\3\1\4\0"+
    "\2\1\7\0\1\1\12\0\1\1\12\0\1\1\5\0"+
    "\1\11\4\0\1\11\45\0\1\11\3\0\1\11\2\0"+
    "\2\11\1\0\2\11\1\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[414];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	public int getYyLine(){
		return yyline+1;
	}
	public int getYyColumn(){
		return yycolumn+1;
	}
	public String getYyText(){
		return yytext();
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 198) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println(" Erreur ligne "+(yyline+1)+" colonne "+(yycolumn+1)+" : "+ yytext()+" => caractère inconnu ! ");
            } 
            // fall through
          case 51: break;
          case 2: 
            { return new Symbol(sym.IDENT , new String(yytext()));
            } 
            // fall through
          case 52: break;
          case 3: 
            { return new Symbol(sym.UNDERSCORE);
            } 
            // fall through
          case 53: break;
          case 4: 
            { return new Symbol(sym.PG);
            } 
            // fall through
          case 54: break;
          case 5: 
            { return new Symbol(sym.PD);
            } 
            // fall through
          case 55: break;
          case 6: 
            { return new Symbol(sym.ACCOLADE_G);
            } 
            // fall through
          case 56: break;
          case 7: 
            { return new Symbol(sym.ACCOLADE_D);
            } 
            // fall through
          case 57: break;
          case 8: 
            { return new Symbol(sym.VIRGULE);
            } 
            // fall through
          case 58: break;
          case 9: 
            { return new Symbol(sym.POINT);
            } 
            // fall through
          case 59: break;
          case 10: 
            { return new Symbol(sym.DEUXPOINTS);
            } 
            // fall through
          case 60: break;
          case 11: 
            { return new Symbol(sym.POINTVIRGULE);
            } 
            // fall through
          case 61: break;
          case 12: 
            { return new Symbol(sym.AFFECT);
            } 
            // fall through
          case 62: break;
          case 13: 
            { return new Symbol(sym.CROCHET_FERMANT);
            } 
            // fall through
          case 63: break;
          case 14: 
            { return new Symbol(sym.ENTIER, new Integer(yytext()));
            } 
            // fall through
          case 64: break;
          case 15: 
            { return new Symbol(sym.GUILLEMET, new String( yytext()));
            } 
            // fall through
          case 65: break;
          case 16: 
            { 
            } 
            // fall through
          case 66: break;
          case 17: 
            { return new Symbol(sym.POINTEXCLAMATION , yytext());
            } 
            // fall through
          case 67: break;
          case 18: 
            { return new Symbol(sym.TYPE_APPAREIL, new String( yytext()));
            } 
            // fall through
          case 68: break;
          case 19: 
            { return new Symbol(sym.SI , yytext());
            } 
            // fall through
          case 69: break;
          case 20: 
            { return new Symbol(sym.EGALE);
            } 
            // fall through
          case 70: break;
          case 21: 
            { return new Symbol(sym.CHAINE, new String(yytext()));
            } 
            // fall through
          case 71: break;
          case 22: 
            { return new Symbol(sym.ETAT_APPAREIL, new String( yytext()));
            } 
            // fall through
          case 72: break;
          case 23: 
            { return new Symbol(sym.FINSI , yytext());
            } 
            // fall through
          case 73: break;
          case 24: 
            { return new Symbol(sym.ETAT , yytext());
            } 
            // fall through
          case 74: break;
          case 25: 
            { return new Symbol(sym.FAIT , yytext());
            } 
            // fall through
          case 75: break;
          case 26: 
            { return new Symbol(sym.ALORS , yytext());
            } 
            // fall through
          case 76: break;
          case 27: 
            { return new Symbol(sym.FAIRE , yytext());
            } 
            // fall through
          case 77: break;
          case 28: 
            { return new Symbol(sym.SINON , yytext());
            } 
            // fall through
          case 78: break;
          case 29: 
            { return new Symbol(sym.ACTION_APPAREIL, new String( yytext()));
            } 
            // fall through
          case 79: break;
          case 30: 
            { return new Symbol(sym.TYPE_INTERFACE, new String( yytext()));
            } 
            // fall through
          case 80: break;
          case 31: 
            { return new Symbol(sym.MESSAGE , yytext());
            } 
            // fall through
          case 81: break;
          case 32: 
            { return new Symbol(sym.DEFINIR , yytext());
            } 
            // fall through
          case 82: break;
          case 33: 
            { return new Symbol(sym.EXECUTER , yytext());
            } 
            // fall through
          case 83: break;
          case 34: 
            { return new Symbol(sym.ASSOCIER , yytext());
            } 
            // fall through
          case 84: break;
          case 35: 
            { return new Symbol(sym.POURTOUT , yytext());
            } 
            // fall through
          case 85: break;
          case 36: 
            { return new Symbol(sym.DEC_SCENARIO_DEBUT , yytext());
            } 
            // fall through
          case 86: break;
          case 37: 
            { return new Symbol(sym.PROGRAMMER , yytext());
            } 
            // fall through
          case 87: break;
          case 38: 
            { return new Symbol(sym.DEC_SCENARIO_FIN , yytext());
            } 
            // fall through
          case 88: break;
          case 39: 
            { return new Symbol(sym.AUTRE_APPAREIL , yytext());
            } 
            // fall through
          case 89: break;
          case 40: 
            { return new Symbol(sym.EXECUTER_SCENARIO , yytext());
            } 
            // fall through
          case 90: break;
          case 41: 
            { return new Symbol(sym.PROGRAMME_DOMUS_DEBUT , yytext());
            } 
            // fall through
          case 91: break;
          case 42: 
            { return new Symbol(sym.PROGRAMME_DOMUS_FIN , yytext());
            } 
            // fall through
          case 92: break;
          case 43: 
            { return new Symbol(sym.DEC_SCENARII_DEBUT , yytext());
            } 
            // fall through
          case 93: break;
          case 44: 
            { return new Symbol(sym.DEC_SCENARII_FIN , yytext());
            } 
            // fall through
          case 94: break;
          case 45: 
            { return new Symbol(sym.DEC_APPAREILS_DEBUT , yytext());
            } 
            // fall through
          case 95: break;
          case 46: 
            { return new Symbol(sym.DEC_COMMANDES_DEBUT , yytext());
            } 
            // fall through
          case 96: break;
          case 47: 
            { return new Symbol(sym.DEC_APPAREILS_FIN , yytext());
            } 
            // fall through
          case 97: break;
          case 48: 
            { return new Symbol(sym.DEC_COMMANDES_FIN , yytext());
            } 
            // fall through
          case 98: break;
          case 49: 
            { return new Symbol(sym.DEC_INTERFACES_DEBUT , yytext());
            } 
            // fall through
          case 99: break;
          case 50: 
            { return new Symbol(sym.DEC_INTERFACES_FIN , yytext());
            } 
            // fall through
          case 100: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
