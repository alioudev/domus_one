
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\002\005\000\002\002\004\000\002\003" +
    "\006\000\002\004\005\000\002\005\005\000\002\005\006" +
    "\000\002\005\005\000\002\005\006\000\002\005\011\000" +
    "\002\005\012\000\002\006\006\000\002\007\005\000\002" +
    "\010\005\000\002\010\006\000\002\011\003\000\002\011" +
    "\005\000\002\013\005\000\002\014\011\000\002\014\012" +
    "\000\002\015\005\000\002\015\006\000\002\015\015\000" +
    "\002\015\016\000\002\015\006\000\002\015\007\000\002" +
    "\015\017\000\002\015\020\000\002\015\021\000\002\015" +
    "\022\000\002\015\007\000\002\015\010\000\002\015\012" +
    "\000\002\015\013\000\002\015\011\000\002\015\012\000" +
    "\002\015\021\000\002\015\022\000\002\015\020\000\002" +
    "\015\021\000\002\015\016\000\002\015\017\000\002\016" +
    "\003\000\002\016\003\000\002\016\006\000\002\016\003" +
    "\000\002\017\003\000\002\017\007\000\002\017\007\000" +
    "\002\023\005\000\002\024\007\000\002\024\010\000\002" +
    "\024\011\000\002\024\012\000\002\024\007\000\002\024" +
    "\010\000\002\024\011\000\002\024\012\000\002\025\003" +
    "\000\002\025\005\000\002\021\015\000\002\021\017\000" +
    "\002\022\003\000\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\307\000\004\004\004\001\002\000\004\006\011\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\004\005\311\001\002\000\004\010\043\001\002\000" +
    "\010\020\013\021\012\061\016\001\002\000\004\055\034" +
    "\001\002\000\004\040\031\001\002\000\004\007\030\001" +
    "\002\000\004\055\020\001\002\000\004\055\020\001\002" +
    "\000\004\050\023\001\002\000\010\042\uffc8\044\021\050" +
    "\uffc8\001\002\000\004\055\020\001\002\000\006\042\uffc7" +
    "\050\uffc7\001\002\000\012\007\ufffd\020\013\021\012\061" +
    "\016\001\002\000\004\007\ufffc\001\002\000\004\050\026" +
    "\001\002\000\012\007\ufffb\020\013\021\012\061\016\001" +
    "\002\000\004\007\ufffa\001\002\000\004\010\ufffe\001\002" +
    "\000\004\061\032\001\002\000\004\041\033\001\002\000" +
    "\004\055\ufff7\001\002\000\004\052\035\001\002\000\004" +
    "\043\036\001\002\000\004\055\020\001\002\000\004\042" +
    "\040\001\002\000\004\050\041\001\002\000\012\007\ufff9" +
    "\020\013\021\012\061\016\001\002\000\004\007\ufff8\001" +
    "\002\000\004\062\301\001\002\000\004\012\045\001\002" +
    "\000\004\014\121\001\002\000\004\016\047\001\002\000" +
    "\006\023\051\026\053\001\002\000\004\005\uffff\001\002" +
    "\000\004\055\106\001\002\000\004\017\105\001\002\000" +
    "\004\055\054\001\002\000\004\052\055\001\002\000\006" +
    "\040\056\043\057\001\002\000\006\054\067\060\071\001" +
    "\002\000\004\040\056\001\002\000\004\050\061\001\002" +
    "\000\010\017\uffcc\023\051\026\053\001\002\000\004\017" +
    "\uffcb\001\002\000\004\042\064\001\002\000\004\050\065" +
    "\001\002\000\010\017\uffca\023\051\026\053\001\002\000" +
    "\004\017\uffc9\001\002\000\004\044\uffc3\001\002\000\004" +
    "\044\072\001\002\000\004\044\uffc4\001\002\000\006\054" +
    "\067\060\071\001\002\000\004\044\074\001\002\000\006" +
    "\054\067\060\071\001\002\000\004\044\076\001\002\000" +
    "\006\054\067\060\071\001\002\000\004\044\100\001\002" +
    "\000\004\060\101\001\002\000\004\041\102\001\002\000" +
    "\010\042\uffc6\044\103\050\uffc6\001\002\000\004\040\056" +
    "\001\002\000\006\042\uffc5\050\uffc5\001\002\000\004\005" +
    "\uffd1\001\002\000\004\052\107\001\002\000\006\043\110" +
    "\055\111\001\002\000\004\055\020\001\002\000\004\050" +
    "\112\001\002\000\010\017\uffd0\023\051\026\053\001\002" +
    "\000\004\017\uffcf\001\002\000\004\042\115\001\002\000" +
    "\004\050\116\001\002\000\010\017\uffce\023\051\026\053" +
    "\001\002\000\004\017\uffcd\001\002\000\004\013\277\001" +
    "\002\000\004\055\122\001\002\000\004\053\123\001\002" +
    "\000\016\022\124\025\130\030\127\033\125\035\132\055" +
    "\131\001\002\000\004\040\272\001\002\000\010\022\234" +
    "\030\235\055\236\001\002\000\004\015\230\001\002\000" +
    "\004\040\202\001\002\000\004\055\177\001\002\000\004" +
    "\050\173\001\002\000\004\055\133\001\002\000\004\047" +
    "\134\001\002\000\010\020\135\055\140\061\137\001\002" +
    "\000\006\036\uffd7\040\170\001\002\000\004\036\141\001" +
    "\002\000\004\036\uffd8\001\002\000\004\036\uffd5\001\002" +
    "\000\006\022\142\055\143\001\002\000\004\040\152\001" +
    "\002\000\004\050\144\001\002\000\004\063\145\001\002" +
    "\000\004\045\146\001\002\000\004\037\147\001\002\000" +
    "\004\045\150\001\002\000\020\015\uffec\022\124\025\130" +
    "\030\127\033\125\035\132\055\131\001\002\000\004\015" +
    "\uffeb\001\002\000\004\057\154\001\002\000\004\041\163" +
    "\001\002\000\006\041\uffd4\044\155\001\002\000\004\055" +
    "\156\001\002\000\006\044\160\050\157\001\002\000\004" +
    "\027\162\001\002\000\004\057\154\001\002\000\004\041" +
    "\uffd3\001\002\000\004\041\uffd2\001\002\000\004\045\164" +
    "\001\002\000\004\037\165\001\002\000\004\045\166\001" +
    "\002\000\020\015\uffda\022\124\025\130\030\127\033\125" +
    "\035\132\055\131\001\002\000\004\015\uffd9\001\002\000" +
    "\004\061\171\001\002\000\004\041\172\001\002\000\004" +
    "\036\uffd6\001\002\000\004\063\174\001\002\000\004\045" +
    "\175\001\002\000\020\015\uffea\022\124\025\130\030\127" +
    "\033\125\035\132\055\131\001\002\000\004\015\uffe9\001" +
    "\002\000\004\045\200\001\002\000\020\015\uffee\022\124" +
    "\025\130\030\127\033\125\035\132\055\131\001\002\000" +
    "\004\015\uffed\001\002\000\004\055\203\001\002\000\004" +
    "\050\204\001\002\000\004\027\205\001\002\000\004\051" +
    "\206\001\002\000\004\064\207\001\002\000\004\041\210" +
    "\001\002\000\004\032\211\001\002\000\006\022\212\055" +
    "\213\001\002\000\004\040\223\001\002\000\004\050\214" +
    "\001\002\000\004\063\215\001\002\000\004\045\216\001" +
    "\002\000\022\015\uffe8\022\124\025\130\030\127\031\217" +
    "\033\125\035\132\055\131\001\002\000\004\045\221\001" +
    "\002\000\004\015\uffe7\001\002\000\020\015\uffe6\022\124" +
    "\025\130\030\127\033\125\035\132\055\131\001\002\000" +
    "\004\015\uffe5\001\002\000\004\057\154\001\002\000\004" +
    "\041\225\001\002\000\004\045\226\001\002\000\020\015" +
    "\uffdc\022\124\025\130\030\127\033\125\035\132\055\131" +
    "\001\002\000\004\015\uffdb\001\002\000\004\055\231\001" +
    "\002\000\004\053\232\001\002\000\006\013\ufff0\014\121" +
    "\001\002\000\004\013\uffef\001\002\000\004\040\263\001" +
    "\002\000\004\022\245\001\002\000\004\050\237\001\002" +
    "\000\004\063\240\001\002\000\004\045\241\001\002\000" +
    "\004\031\242\001\002\000\004\045\243\001\002\000\020" +
    "\015\uffe0\022\124\025\130\030\127\033\125\035\132\055" +
    "\131\001\002\000\004\015\uffdf\001\002\000\004\040\246" +
    "\001\002\000\004\055\247\001\002\000\004\050\250\001" +
    "\002\000\004\027\251\001\002\000\004\051\252\001\002" +
    "\000\004\064\253\001\002\000\004\041\254\001\002\000" +
    "\004\032\255\001\002\000\004\055\256\001\002\000\004" +
    "\050\257\001\002\000\004\063\260\001\002\000\004\045" +
    "\261\001\002\000\020\015\uffde\022\124\025\130\030\127" +
    "\033\125\035\132\055\131\001\002\000\004\015\uffdd\001" +
    "\002\000\004\057\154\001\002\000\004\041\265\001\002" +
    "\000\004\045\266\001\002\000\004\031\267\001\002\000" +
    "\004\045\270\001\002\000\020\015\uffe2\022\124\025\130" +
    "\030\127\033\125\035\132\055\131\001\002\000\004\015" +
    "\uffe1\001\002\000\004\057\154\001\002\000\004\041\274" +
    "\001\002\000\004\045\275\001\002\000\020\015\uffe4\022" +
    "\124\025\130\030\127\033\125\035\132\055\131\001\002" +
    "\000\004\015\uffe3\001\002\000\004\016\ufff1\001\002\000" +
    "\004\011\310\001\002\000\004\055\303\001\002\000\004" +
    "\050\306\001\002\000\006\044\304\050\ufff3\001\002\000" +
    "\004\055\303\001\002\000\004\050\ufff2\001\002\000\006" +
    "\011\ufff5\062\301\001\002\000\004\011\ufff4\001\002\000" +
    "\004\012\ufff6\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\307\000\004\002\004\001\001\000\006\003\006\004" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\043\001\001\000\006\005\013\006" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\024\001\001\000\004\025\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\021" +
    "\001\001\000\002\001\001\000\006\005\023\006\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\026" +
    "\006\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\041\006\014" +
    "\001\001\000\002\001\001\000\004\010\277\001\001\000" +
    "\004\013\045\001\001\000\004\014\117\001\001\000\004" +
    "\023\047\001\001\000\004\024\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\057\001\001\000\004\022" +
    "\067\001\001\000\004\021\062\001\001\000\002\001\001" +
    "\000\004\024\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\072\001\001\000\002\001\001\000\004" +
    "\022\074\001\001\000\002\001\001\000\004\022\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\113\001\001\000\002\001\001\000\004\024" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\135\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\150\001" +
    "\001\000\002\001\001\000\004\017\152\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\160\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\166\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\175" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\200\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\217\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\221\001\001\000\002\001" +
    "\001\000\004\017\223\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\226\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\232\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\243\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\261\001\001\000\002\001\001\000\004\017\263" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\270\001\001\000\002" +
    "\001\001\000\004\017\272\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\275\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\301\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\304" +
    "\001\001\000\002\001\001\000\004\010\306\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public static void main(String args[]) throws Exception {
		//new parser(new Yylex(System.in)).parse();
		new parser(new Yylex(new InputStreamReader(System.in))).parse();
	}

	public void syntax_error(Symbol cur_token) { 
		// n'interrompt pas la compil... 
		// on est par defaut dans l'etat error qui permet ensuite la recup
		// par defaut : report_error("syntax error", null);
		report_error("Syntaxe incorrecte <"+tokenToString(cur_token)+">", null);        
	}

	public void report_error(String message, Object info) {   
		// n'interrompt pas la compil
		if (info == null) System.err.println("Mon erreur <"+ ptext()+ "> ligne "+ pline() + ", colonne " + pcolumn() + " : " + message);
		else System.err.println("Mon erreur <"+ptext()+ "> ligne "+ pline() + ", colonne " + pcolumn() + " : " +message+" : "+info);
		System.err.println("-> mais on continue l'analyse... ");
	}

	public void unrecovered_syntax_error(Symbol cur_token) {
    	// par defaut : report_fatal_error("Couldn't repair and continue parse", null);
		// on n'a pas reussi a faire de la recup
		report_fatal_error("Recuperation impossible <"+tokenToString(cur_token)+">", null);   // interrompt la compil     
	}

	public void report_fatal_error(String message, Object info) {  
		// qd cette fct est appelee, message vaut par defaut "Couldn't repair and continue parse"
		String m = "Mon erreur fatale <"+ ptext()+ "> ligne " + pline() + ", colonne " + pcolumn() + " : " + message;
		if (info == null) System.err.println(m);
		else System.err.println(m+" : "+info);
		System.err.println("-> arr�t de l'analyse...");
		done_parsing(); // interrompt la compil
  	}

	public int pline(){
		return ((Yylex)getScanner()).getYyLine();
	}
	public int pcolumn(){
		return ((Yylex)getScanner()).getYyColumn();
	}
	public String ptext(){
		return ((Yylex)getScanner()).getYyText();
	}


public String tokenToString (Symbol token) {
// qqs exemples pour voir...
     switch (token.sym) {
	case sym.SI : return "SI"; 
	case sym.CHAINE : return "CHAINE "+token.value;  
	case sym.ENTIER : return "ENTIER "+token.value;  
	case sym.TYPE_INTERFACE : return "TYPE_INTERFACE"+token.value;  
	case sym.TYPE_APPAREIL : return "TYPE_APPAREIL"+token.value;  
	case sym.ACTION_APPAREIL : return "ACTION_APPAREIL"+token.value;  
	case sym.ETAT_APPAREIL : return "ETAT_APPAREIL"+token.value;  
	//  ... A compl�ter !!
	case sym.PROGRAMME_DOMUS_DEBUT : return "PROGRAMME_DOMUS";
	case sym.PROGRAMME_DOMUS_FIN : return "FINPROGRAMME_DOMUS";
	case sym.DEC_APPAREILS_DEBUT : return "DEC_APPAREILS_DEBUT";
	case sym.DEC_APPAREILS_FIN : return "DEC_APPAREILS_FIN";
	case sym.DEC_INTERFACES_DEBUT : return "DEC_INTERFACES_DEBUT";
	case sym.DEC_INTERFACES_FIN : return "DEC_INTERFACES_FIN";
	case sym.DEC_SCENARII_DEBUT : return "DEC_SCENARII_DEBUT";
	case sym.DEC_SCENARII_FIN : return "DEC_SCENARII_FIN";
	case sym.DEC_COMMANDES_DEBUT : return "DEC_COMMANDES_DEBUT";
	case sym.DEC_COMMANDES_FIN : return "DEC_COMMANDES_FIN";
	case sym.DEC_SCENARIO_DEBUT : return "DEC_SCENARIO_DEBUT";
	case sym.DEC_SCENARIO_FIN : return "DEC_SCENARIO_FIN";
	case sym.AUTRE_APPAREIL : return "AUTRE_APPAREIL";
	case sym.DEFINIR : return "DEFINIR";
	case sym.MESSAGE : return "MESSAGE";
	case sym.VIRGULE : return "VIRGULE";
	case sym.ASSOCIER : return "ASSOCIER";
	case sym.EXECUTER : return "EXECUTER";
	case sym.EXECUTER_SCENARIO : return "EXECUTER_SCENARIO";
	case sym.PROGRAMMER : return "PROGRAMMER";
	case sym.ETAT : return "ETAT";
	case sym.ALORS : return "ALORS";
	case sym.SINON : return "SINON";
	case sym.FINSI : return "FINSI";
	case sym.POURTOUT : return "POURTOUT";
	case sym.FAIRE : return "FAIRE";
	case sym.FAIT : return "FAIT";
	case sym.PG : return "PG";
	case sym.PD : return "PD";
	case sym.GUILLEMET : return "GUILLEMET";
	case sym.POINTEXCLAMATION : return "POINTEXCLAMATION";
	case sym.ACCOLADE_D : return "ACCOLADE_D";
	case sym.ACCOLADE_G : return "ACCOLADE_G";
	case sym.POINTVIRGULE : return "POINTVIRGULE";
	case sym.DEUXPOINTS : return "DEUXPOINTS";
	case sym.POINT: return "POINT";
	case sym.EGALE : return "EGALE";
	case sym.AFFECT : return "AFFECT";
	case sym.UNDERSCORE : return "UNDERSCORE";
	case sym.IDENT : return "IDENT";
	case sym.CROCHET_FERMANT : return "CROCHET_FERMANT";


	default : return "Token imprevu ou error";
	}
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



// table identifiants appareils
HashMap <String, String> hashAppareils = new HashMap <String, String>();
// table declarations ensembles appareils
HashMap <String, List<String>> hashEnsembleAppareils = new HashMap <String, List<String>>();
// table declarations interfaces
HashMap <String, String> hashInterfaces = new HashMap <String, String>();
// table Scenarios
LinkedHashMap <String, List<String>> hashScenarios = new LinkedHashMap <String, List<String>>();
// table declaration commandes
HashMap <String, List<String>> hashCommandes = new HashMap <String, List<String>>();
// table programmation commandes
HashMap <String, List<String>> hashProgCommandes = new HashMap <String, List<String>>();


void exemple_de_fonction(String i1, String i2)
{
	String m = "Erreur syntaxique <"+i2+"> au lieu de <"+i1+">";
	if (!(i1.equals(i2))) parser.report_error(m,null);	 
}


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // domus ::= PROGRAMME_DOMUS_DEBUT prog PROGRAMME_DOMUS_FIN 
            {
              Object RESULT =null;
		 System.out.println("PROGRAMME_DOMUS_FIN OK"+parser.pline()+","+parser.pcolumn()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("domus",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= domus EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // prog ::= dec_appareils dec_interfaces dec_scenarii dec_commandes 
            {
              Object RESULT =null;
		 System.out.println("PROG OK"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dec_appareils ::= DEC_APPAREILS_DEBUT listeDeclarationAppareils DEC_APPAREILS_FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_appareils",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // listeDeclarationAppareils ::= TYPE_APPAREIL liste_ident POINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationAppareils",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // listeDeclarationAppareils ::= TYPE_APPAREIL liste_ident POINT listeDeclarationAppareils 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationAppareils",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // listeDeclarationAppareils ::= liste_autres_appareils liste_ident POINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationAppareils",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // listeDeclarationAppareils ::= liste_autres_appareils liste_ident POINT listeDeclarationAppareils 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationAppareils",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // listeDeclarationAppareils ::= DEFINIR IDENT AFFECT ACCOLADE_G liste_ident ACCOLADE_D POINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationAppareils",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // listeDeclarationAppareils ::= DEFINIR IDENT AFFECT ACCOLADE_G liste_ident ACCOLADE_D POINT listeDeclarationAppareils 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationAppareils",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // liste_autres_appareils ::= AUTRE_APPAREIL PG TYPE_APPAREIL PD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("liste_autres_appareils",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // dec_interfaces ::= DEC_INTERFACES_DEBUT listeDeclarationInterfaces DEC_INTERFACES_FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_interfaces",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // listeDeclarationInterfaces ::= TYPE_INTERFACE listeInterfaces POINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationInterfaces",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // listeDeclarationInterfaces ::= TYPE_INTERFACE listeInterfaces POINT listeDeclarationInterfaces 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationInterfaces",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // listeInterfaces ::= IDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeInterfaces",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // listeInterfaces ::= IDENT VIRGULE listeInterfaces 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeInterfaces",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // dec_scenarii ::= DEC_SCENARII_DEBUT listeDeclarationScenariis DEC_SCENARII_FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_scenarii",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // listeDeclarationScenariis ::= DEC_SCENARIO_DEBUT IDENT CROCHET_FERMANT listeDeclarationScenarios DEC_SCENARIO_FIN IDENT CROCHET_FERMANT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenariis",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // listeDeclarationScenariis ::= DEC_SCENARIO_DEBUT IDENT CROCHET_FERMANT listeDeclarationScenarios DEC_SCENARIO_FIN IDENT CROCHET_FERMANT listeDeclarationScenariis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenariis",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // listeDeclarationScenarios ::= EXECUTER_SCENARIO IDENT POINTVIRGULE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenarios",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // listeDeclarationScenarios ::= EXECUTER_SCENARIO IDENT POINTVIRGULE listeDeclarationScenarios 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenarios",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // listeDeclarationScenarios ::= POURTOUT IDENT DEUXPOINTS categorie_appareils FAIRE IDENT POINT ACTION_APPAREIL POINTVIRGULE FAIT POINTVIRGULE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenarios",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // listeDeclarationScenarios ::= POURTOUT IDENT DEUXPOINTS categorie_appareils FAIRE IDENT POINT ACTION_APPAREIL POINTVIRGULE FAIT POINTVIRGULE listeDeclarationScenarios 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenarios",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // listeDeclarationScenarios ::= IDENT POINT ACTION_APPAREIL POINTVIRGULE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenarios",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // listeDeclarationScenarios ::= IDENT POINT ACTION_APPAREIL POINTVIRGULE listeDeclarationScenarios 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenarios",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // listeDeclarationScenarios ::= SI PG IDENT POINT ETAT EGALE ETAT_APPAREIL PD ALORS IDENT POINT ACTION_APPAREIL POINTVIRGULE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenarios",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // listeDeclarationScenarios ::= SI PG IDENT POINT ETAT EGALE ETAT_APPAREIL PD ALORS IDENT POINT ACTION_APPAREIL POINTVIRGULE listeDeclarationScenarios 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenarios",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // listeDeclarationScenarios ::= SI PG IDENT POINT ETAT EGALE ETAT_APPAREIL PD ALORS IDENT POINT ACTION_APPAREIL POINTVIRGULE FINSI POINTVIRGULE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenarios",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // listeDeclarationScenarios ::= SI PG IDENT POINT ETAT EGALE ETAT_APPAREIL PD ALORS IDENT POINT ACTION_APPAREIL POINTVIRGULE FINSI POINTVIRGULE listeDeclarationScenarios 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenarios",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // listeDeclarationScenarios ::= MESSAGE PG contenu_message PD POINTVIRGULE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenarios",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // listeDeclarationScenarios ::= MESSAGE PG contenu_message PD POINTVIRGULE listeDeclarationScenarios 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenarios",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // listeDeclarationScenarios ::= SINON MESSAGE PG contenu_message PD POINTVIRGULE FINSI POINTVIRGULE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenarios",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // listeDeclarationScenarios ::= SINON MESSAGE PG contenu_message PD POINTVIRGULE FINSI POINTVIRGULE listeDeclarationScenarios 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenarios",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // listeDeclarationScenarios ::= SINON IDENT POINT ACTION_APPAREIL POINTVIRGULE FINSI POINTVIRGULE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenarios",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // listeDeclarationScenarios ::= SINON IDENT POINT ACTION_APPAREIL POINTVIRGULE FINSI POINTVIRGULE listeDeclarationScenarios 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenarios",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // listeDeclarationScenarios ::= SINON SI MESSAGE PG IDENT POINT ETAT EGALE ETAT_APPAREIL PD ALORS IDENT POINT ACTION_APPAREIL POINTVIRGULE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenarios",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // listeDeclarationScenarios ::= SINON SI MESSAGE PG IDENT POINT ETAT EGALE ETAT_APPAREIL PD ALORS IDENT POINT ACTION_APPAREIL POINTVIRGULE listeDeclarationScenarios 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenarios",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // listeDeclarationScenarios ::= SI PG IDENT POINT ETAT EGALE ETAT_APPAREIL PD ALORS MESSAGE PG contenu_message PD POINTVIRGULE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenarios",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // listeDeclarationScenarios ::= SI PG IDENT POINT ETAT EGALE ETAT_APPAREIL PD ALORS MESSAGE PG contenu_message PD POINTVIRGULE listeDeclarationScenarios 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenarios",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // listeDeclarationScenarios ::= POURTOUT IDENT DEUXPOINTS categorie_appareils FAIRE MESSAGE PG contenu_message PD POINTVIRGULE FAIT POINTVIRGULE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenarios",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // listeDeclarationScenarios ::= POURTOUT IDENT DEUXPOINTS categorie_appareils FAIRE MESSAGE PG contenu_message PD POINTVIRGULE FAIT POINTVIRGULE listeDeclarationScenarios 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenarios",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // categorie_appareils ::= TYPE_APPAREIL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("categorie_appareils",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // categorie_appareils ::= AUTRE_APPAREIL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("categorie_appareils",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // categorie_appareils ::= AUTRE_APPAREIL PG TYPE_APPAREIL PD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("categorie_appareils",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // categorie_appareils ::= IDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("categorie_appareils",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // contenu_message ::= CHAINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("contenu_message",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // contenu_message ::= CHAINE VIRGULE IDENT VIRGULE contenu_message 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("contenu_message",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // contenu_message ::= CHAINE VIRGULE IDENT POINT ETAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("contenu_message",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // dec_commandes ::= DEC_COMMANDES_DEBUT listeDeclarationCommandes DEC_COMMANDES_FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_commandes",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // listeDeclarationCommandes ::= ASSOCIER IDENT AFFECT IDENT POINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationCommandes",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // listeDeclarationCommandes ::= ASSOCIER IDENT AFFECT IDENT POINT listeDeclarationCommandes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationCommandes",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // listeDeclarationCommandes ::= ASSOCIER IDENT AFFECT ACCOLADE_G liste_ident ACCOLADE_D POINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationCommandes",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // listeDeclarationCommandes ::= ASSOCIER IDENT AFFECT ACCOLADE_G liste_ident ACCOLADE_D POINT listeDeclarationCommandes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationCommandes",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // listeDeclarationCommandes ::= PROGRAMMER IDENT AFFECT liste_dates POINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationCommandes",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // listeDeclarationCommandes ::= PROGRAMMER IDENT AFFECT liste_dates POINT listeDeclarationCommandes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationCommandes",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // listeDeclarationCommandes ::= PROGRAMMER IDENT AFFECT ACCOLADE_G liste_dates ACCOLADE_D POINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationCommandes",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // listeDeclarationCommandes ::= PROGRAMMER IDENT AFFECT ACCOLADE_G liste_dates ACCOLADE_D POINT listeDeclarationCommandes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationCommandes",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // liste_ident ::= IDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("liste_ident",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // liste_ident ::= IDENT VIRGULE liste_ident 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("liste_ident",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // liste_dates ::= PG entierOuUnderscore VIRGULE entierOuUnderscore VIRGULE entierOuUnderscore VIRGULE entierOuUnderscore VIRGULE ENTIER PD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("liste_dates",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // liste_dates ::= PG entierOuUnderscore VIRGULE entierOuUnderscore VIRGULE entierOuUnderscore VIRGULE entierOuUnderscore VIRGULE ENTIER PD VIRGULE liste_dates 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("liste_dates",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // entierOuUnderscore ::= ENTIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("entierOuUnderscore",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // entierOuUnderscore ::= UNDERSCORE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("entierOuUnderscore",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
