
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\117\000\002\002\005\000\002\002\004\000\002\003" +
    "\006\000\002\004\005\000\002\005\005\000\002\005\006" +
    "\000\002\005\005\000\002\005\006\000\002\005\011\000" +
    "\002\005\012\000\002\006\006\000\002\007\005\000\002" +
    "\010\005\000\002\010\006\000\002\011\003\000\002\011" +
    "\005\000\002\012\005\000\002\013\011\000\002\013\012" +
    "\000\002\014\005\000\002\014\006\000\002\014\013\000" +
    "\002\014\014\000\002\014\004\000\002\014\005\000\002" +
    "\014\011\000\002\014\012\000\002\014\016\000\002\014" +
    "\017\000\002\014\013\000\002\014\014\000\002\014\007" +
    "\000\002\014\010\000\002\014\012\000\002\014\013\000" +
    "\002\014\014\000\002\014\015\000\002\014\016\000\002" +
    "\014\017\000\002\014\007\000\002\014\010\000\002\014" +
    "\011\000\002\014\012\000\002\014\013\000\002\014\014" +
    "\000\002\014\012\000\002\014\013\000\002\014\014\000" +
    "\002\014\015\000\002\014\016\000\002\014\017\000\002" +
    "\014\014\000\002\014\015\000\002\014\016\000\002\014" +
    "\017\000\002\015\003\000\002\015\003\000\002\015\006" +
    "\000\002\015\003\000\002\025\007\000\002\026\005\000" +
    "\002\016\003\000\002\016\007\000\002\016\007\000\002" +
    "\021\005\000\002\022\007\000\002\022\010\000\002\022" +
    "\011\000\002\022\012\000\002\022\007\000\002\022\010" +
    "\000\002\022\011\000\002\022\012\000\002\023\003\000" +
    "\002\023\005\000\002\017\015\000\002\017\017\000\002" +
    "\020\003\000\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\335\000\004\004\004\001\002\000\004\006\011\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\004\005\337\001\002\000\004\010\043\001\002\000" +
    "\010\020\013\021\012\060\016\001\002\000\004\054\034" +
    "\001\002\000\004\037\031\001\002\000\004\007\030\001" +
    "\002\000\004\054\020\001\002\000\004\054\020\001\002" +
    "\000\004\047\023\001\002\000\010\041\uffb8\043\021\047" +
    "\uffb8\001\002\000\004\054\020\001\002\000\006\041\uffb7" +
    "\047\uffb7\001\002\000\012\007\ufffd\020\013\021\012\060" +
    "\016\001\002\000\004\007\ufffc\001\002\000\004\047\026" +
    "\001\002\000\012\007\ufffb\020\013\021\012\060\016\001" +
    "\002\000\004\007\ufffa\001\002\000\004\010\ufffe\001\002" +
    "\000\004\060\032\001\002\000\004\040\033\001\002\000" +
    "\004\054\ufff7\001\002\000\004\051\035\001\002\000\004" +
    "\042\036\001\002\000\004\054\020\001\002\000\004\041" +
    "\040\001\002\000\004\047\041\001\002\000\012\007\ufff9" +
    "\020\013\021\012\060\016\001\002\000\004\007\ufff8\001" +
    "\002\000\004\061\327\001\002\000\004\012\045\001\002" +
    "\000\004\014\121\001\002\000\004\016\047\001\002\000" +
    "\006\023\051\026\053\001\002\000\004\005\uffff\001\002" +
    "\000\004\054\106\001\002\000\004\017\105\001\002\000" +
    "\004\054\054\001\002\000\004\051\055\001\002\000\006" +
    "\037\056\042\057\001\002\000\006\053\067\057\071\001" +
    "\002\000\004\037\056\001\002\000\004\047\061\001\002" +
    "\000\010\017\uffbc\023\051\026\053\001\002\000\004\017" +
    "\uffbb\001\002\000\004\041\064\001\002\000\004\047\065" +
    "\001\002\000\010\017\uffba\023\051\026\053\001\002\000" +
    "\004\017\uffb9\001\002\000\004\043\uffb3\001\002\000\004" +
    "\043\072\001\002\000\004\043\uffb4\001\002\000\006\053" +
    "\067\057\071\001\002\000\004\043\074\001\002\000\006" +
    "\053\067\057\071\001\002\000\004\043\076\001\002\000" +
    "\006\053\067\057\071\001\002\000\004\043\100\001\002" +
    "\000\004\057\101\001\002\000\004\040\102\001\002\000" +
    "\010\041\uffb6\043\103\047\uffb6\001\002\000\004\037\056" +
    "\001\002\000\006\041\uffb5\047\uffb5\001\002\000\004\005" +
    "\uffc1\001\002\000\004\051\107\001\002\000\006\042\110" +
    "\054\111\001\002\000\004\054\020\001\002\000\004\047" +
    "\112\001\002\000\010\017\uffc0\023\051\026\053\001\002" +
    "\000\004\017\uffbf\001\002\000\004\041\115\001\002\000" +
    "\004\047\116\001\002\000\010\017\uffbe\023\051\026\053" +
    "\001\002\000\004\017\uffbd\001\002\000\004\013\325\001" +
    "\002\000\004\054\122\001\002\000\004\052\123\001\002" +
    "\000\016\022\124\025\130\030\127\033\125\034\132\054" +
    "\131\001\002\000\004\037\320\001\002\000\010\022\235" +
    "\030\236\054\131\001\002\000\004\015\231\001\002\000" +
    "\004\037\201\001\002\000\004\054\176\001\002\000\004" +
    "\047\174\001\002\000\004\054\136\001\002\000\004\044" +
    "\134\001\002\000\020\015\uffea\022\124\025\130\030\127" +
    "\033\125\034\132\054\131\001\002\000\004\015\uffe9\001" +
    "\002\000\004\046\137\001\002\000\010\020\140\054\143" +
    "\060\142\001\002\000\006\035\uffc9\037\171\001\002\000" +
    "\004\035\144\001\002\000\004\035\uffca\001\002\000\004" +
    "\035\uffc7\001\002\000\006\022\145\054\131\001\002\000" +
    "\004\037\153\001\002\000\004\044\147\001\002\000\004" +
    "\036\150\001\002\000\004\044\151\001\002\000\020\015" +
    "\uffec\022\124\025\130\030\127\033\125\034\132\054\131" +
    "\001\002\000\004\015\uffeb\001\002\000\004\056\155\001" +
    "\002\000\004\040\164\001\002\000\006\040\uffc4\043\156" +
    "\001\002\000\004\054\157\001\002\000\006\043\161\047" +
    "\160\001\002\000\004\027\163\001\002\000\004\056\155" +
    "\001\002\000\004\040\uffc3\001\002\000\004\040\uffc2\001" +
    "\002\000\004\044\165\001\002\000\004\036\166\001\002" +
    "\000\004\044\167\001\002\000\020\015\uffcc\022\124\025" +
    "\130\030\127\033\125\034\132\054\131\001\002\000\004" +
    "\015\uffcb\001\002\000\004\060\172\001\002\000\004\040" +
    "\173\001\002\000\004\035\uffc8\001\002\000\004\062\175" +
    "\001\002\000\004\044\uffc5\001\002\000\004\044\177\001" +
    "\002\000\020\015\uffee\022\124\025\130\030\127\033\125" +
    "\034\132\054\131\001\002\000\004\015\uffed\001\002\000" +
    "\004\054\203\001\002\000\004\040\210\001\002\000\004" +
    "\047\204\001\002\000\004\027\205\001\002\000\004\050" +
    "\206\001\002\000\004\063\207\001\002\000\004\040\uffc6" +
    "\001\002\000\004\032\211\001\002\000\006\022\212\054" +
    "\131\001\002\000\004\037\221\001\002\000\004\044\214" +
    "\001\002\000\022\015\uffe8\022\124\025\130\030\127\031" +
    "\216\033\125\034\132\054\131\001\002\000\004\015\uffe7" +
    "\001\002\000\004\044\217\001\002\000\020\015\uffe4\022" +
    "\124\025\130\030\127\033\125\034\132\054\131\001\002" +
    "\000\004\015\uffe3\001\002\000\004\056\155\001\002\000" +
    "\004\040\223\001\002\000\004\044\224\001\002\000\022" +
    "\015\uffce\022\124\025\130\030\127\031\226\033\125\034" +
    "\132\054\131\001\002\000\004\015\uffcd\001\002\000\004" +
    "\044\227\001\002\000\020\015\uffe6\022\124\025\130\030" +
    "\127\033\125\034\132\054\131\001\002\000\004\015\uffe5" +
    "\001\002\000\004\054\232\001\002\000\004\052\233\001" +
    "\002\000\006\013\ufff0\014\121\001\002\000\004\013\uffef" +
    "\001\002\000\004\037\306\001\002\000\006\022\262\037" +
    "\261\001\002\000\004\044\240\001\002\000\006\022\241" +
    "\031\242\001\002\000\004\037\250\001\002\000\004\044" +
    "\243\001\002\000\022\015\uffda\022\124\025\130\030\127" +
    "\031\245\033\125\034\132\054\131\001\002\000\004\015" +
    "\uffd9\001\002\000\004\044\246\001\002\000\020\015\uffd8" +
    "\022\124\025\130\030\127\033\125\034\132\054\131\001" +
    "\002\000\004\015\uffd7\001\002\000\004\056\155\001\002" +
    "\000\004\040\252\001\002\000\004\044\253\001\002\000" +
    "\004\031\254\001\002\000\004\044\255\001\002\000\004" +
    "\031\256\001\002\000\004\044\257\001\002\000\020\015" +
    "\uffdc\022\124\025\130\030\127\033\125\034\132\054\131" +
    "\001\002\000\004\015\uffdb\001\002\000\004\054\203\001" +
    "\002\000\004\037\263\001\002\000\004\054\203\001\002" +
    "\000\004\040\265\001\002\000\004\032\266\001\002\000" +
    "\004\054\131\001\002\000\004\044\270\001\002\000\020" +
    "\015\uffd6\022\124\025\130\030\127\033\125\034\132\054" +
    "\131\001\002\000\004\015\uffd5\001\002\000\004\040\273" +
    "\001\002\000\004\032\274\001\002\000\004\054\131\001" +
    "\002\000\004\044\276\001\002\000\022\015\uffd4\022\124" +
    "\025\130\030\127\031\300\033\125\034\132\054\131\001" +
    "\002\000\004\015\uffd3\001\002\000\004\044\301\001\002" +
    "\000\022\015\uffd2\022\124\025\130\030\127\031\303\033" +
    "\125\034\132\054\131\001\002\000\004\015\uffd1\001\002" +
    "\000\004\044\304\001\002\000\020\015\uffd0\022\124\025" +
    "\130\030\127\033\125\034\132\054\131\001\002\000\004" +
    "\015\uffcf\001\002\000\004\056\155\001\002\000\004\040" +
    "\310\001\002\000\004\044\311\001\002\000\004\031\312" +
    "\001\002\000\004\044\313\001\002\000\022\015\uffe0\022" +
    "\124\025\130\030\127\031\315\033\125\034\132\054\131" +
    "\001\002\000\004\015\uffdf\001\002\000\004\044\316\001" +
    "\002\000\020\015\uffde\022\124\025\130\030\127\033\125" +
    "\034\132\054\131\001\002\000\004\015\uffdd\001\002\000" +
    "\004\056\155\001\002\000\004\040\322\001\002\000\004" +
    "\044\323\001\002\000\020\015\uffe2\022\124\025\130\030" +
    "\127\033\125\034\132\054\131\001\002\000\004\015\uffe1" +
    "\001\002\000\004\016\ufff1\001\002\000\004\011\336\001" +
    "\002\000\004\054\331\001\002\000\004\047\334\001\002" +
    "\000\006\043\332\047\ufff3\001\002\000\004\054\331\001" +
    "\002\000\004\047\ufff2\001\002\000\006\011\ufff5\061\327" +
    "\001\002\000\004\011\ufff4\001\002\000\004\012\ufff6\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\335\000\004\002\004\001\001\000\006\003\006\004" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\043\001\001\000\006\005\013\006" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\024\001\001\000\004\023\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\021" +
    "\001\001\000\002\001\001\000\006\005\023\006\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\026" +
    "\006\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\041\006\014" +
    "\001\001\000\002\001\001\000\004\010\325\001\001\000" +
    "\004\012\045\001\001\000\004\013\117\001\001\000\004" +
    "\021\047\001\001\000\004\022\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\057\001\001\000\004\020" +
    "\067\001\001\000\004\017\062\001\001\000\002\001\001" +
    "\000\004\022\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\072\001\001\000\002\001\001\000\004" +
    "\020\074\001\001\000\002\001\001\000\004\020\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\113\001\001\000\002\001\001\000\004\022" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\125\026\132\001\001\000\002\001\001\000\004\026" +
    "\236\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\014\134\026\132\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\140\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\145\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\014\151" +
    "\026\132\001\001\000\002\001\001\000\004\016\153\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\161\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\167\026" +
    "\132\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\014\177\026\132\001\001" +
    "\000\002\001\001\000\004\025\201\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\212\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\014\214\026\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\014\217\026\132\001\001\000\002" +
    "\001\001\000\004\016\221\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\014\224\026\132\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\227\026\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\233\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\243\026" +
    "\132\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\246\026\132\001\001\000\002\001\001\000\004\016" +
    "\250\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\014\257\026\132\001\001\000\002\001\001" +
    "\000\004\025\271\001\001\000\002\001\001\000\004\025" +
    "\263\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\266\001\001\000\002\001\001\000\006\014\270\026" +
    "\132\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\274\001\001\000\002\001\001\000" +
    "\006\014\276\026\132\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\014\301\026\132\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\014\304\026\132\001\001" +
    "\000\002\001\001\000\004\016\306\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\014\313\026\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\014\316\026\132\001\001\000\002" +
    "\001\001\000\004\016\320\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\014\323\026\132\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\327\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\332\001\001\000\002\001\001\000\004\010\334\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




		public static void main(String args[]) throws Exception {
			//new parser(new Yylex(System.in)).parse();
			new parser(new Yylex(new InputStreamReader(System.in))).parse();
		}

		public void syntax_error(Symbol cur_token) { 
			// n'interrompt pas la compil... 
			// on est par defaut dans l'etat error qui permet ensuite la recup
			// par defaut : report_error("syntax error", null);
			report_error("Syntaxe incorrecte <"+tokenToString(cur_token)+">", null);        
		}

		public void report_error(String message, Object info) {   
			// n'interrompt pas la compil
			if (info == null) System.err.println("Mon erreur <"+ ptext()+ "> ligne "+ pline() + ", colonne " + pcolumn() + " : " + message);
			else System.err.println("Mon erreur <"+ptext()+ "> ligne "+ pline() + ", colonne " + pcolumn() + " : " +message+" : "+info);
			System.err.println("-> mais on continue l'analyse... ");
		}

		public void unrecovered_syntax_error(Symbol cur_token) {
			// par defaut : report_fatal_error("Couldn't repair and continue parse", null);
			// on n'a pas reussi a faire de la recup
			report_fatal_error("Recuperation impossible <"+tokenToString(cur_token)+">", null);   // interrompt la compil     
		}

		public void report_fatal_error(String message, Object info) {  
			// qd cette fct est appelee, message vaut par defaut "Couldn't repair and continue parse"
			String m = "Mon erreur fatale <"+ ptext()+ "> ligne " + pline() + ", colonne " + pcolumn() + " : " + message;
			if (info == null) System.err.println(m);
			else System.err.println(m+" : "+info);
			System.err.println("-> arr�t de l'analyse...");
			done_parsing(); // interrompt la compil
		}

		public int pline(){
			return ((Yylex)getScanner()).getYyLine();
		}
		public int pcolumn(){
			return ((Yylex)getScanner()).getYyColumn();
		}
		public String ptext(){
			return ((Yylex)getScanner()).getYyText();
		}


	public String tokenToString (Symbol token) {
	// qqs exemples pour voir...
		switch (token.sym) {
		case sym.SI : return "SI"; 
		case sym.CHAINE : return "CHAINE "+token.value;  
		case sym.ENTIER : return "ENTIER "+token.value;  
		case sym.TYPE_INTERFACE : return "TYPE_INTERFACE"+token.value;  
		case sym.TYPE_APPAREIL : return "TYPE_APPAREIL"+token.value;  
		case sym.ACTION_APPAREIL : return "ACTION_APPAREIL"+token.value;  
		case sym.ETAT_APPAREIL : return "ETAT_APPAREIL"+token.value;  
		//  ... A compl�ter !!
		case sym.PROGRAMME_DOMUS_DEBUT : return "PROGRAMME_DOMUS";
		case sym.PROGRAMME_DOMUS_FIN : return "FINPROGRAMME_DOMUS";
		case sym.DEC_APPAREILS_DEBUT : return "DEC_APPAREILS_DEBUT";
		case sym.DEC_APPAREILS_FIN : return "DEC_APPAREILS_FIN";
		case sym.DEC_INTERFACES_DEBUT : return "DEC_INTERFACES_DEBUT";
		case sym.DEC_INTERFACES_FIN : return "DEC_INTERFACES_FIN";
		case sym.DEC_SCENARII_DEBUT : return "DEC_SCENARII_DEBUT";
		case sym.DEC_SCENARII_FIN : return "DEC_SCENARII_FIN";
		case sym.DEC_COMMANDES_DEBUT : return "DEC_COMMANDES_DEBUT";
		case sym.DEC_COMMANDES_FIN : return "DEC_COMMANDES_FIN";
		case sym.DEC_SCENARIO_DEBUT : return "DEC_SCENARIO_DEBUT";
		case sym.DEC_SCENARIO_FIN : return "DEC_SCENARIO_FIN";
		case sym.AUTRE_APPAREIL : return "AUTRE_APPAREIL";
		case sym.DEFINIR : return "DEFINIR";
		case sym.MESSAGE : return "MESSAGE";
		case sym.VIRGULE : return "VIRGULE";
		case sym.ASSOCIER : return "ASSOCIER";
		case sym.EXECUTER : return "EXECUTER";
		case sym.EXECUTER_SCENARIO : return "EXECUTER_SCENARIO";
		case sym.PROGRAMMER : return "PROGRAMMER";
		case sym.ETAT : return "ETAT";
		case sym.ALORS : return "ALORS";
		case sym.SINON : return "SINON";
		case sym.FINSI : return "FINSI";
		case sym.POURTOUT : return "POURTOUT";
		case sym.FAIRE : return "FAIRE";
		case sym.FAIT : return "FAIT";
		case sym.PG : return "PG";
		case sym.PD : return "PD";
		case sym.GUILLEMET : return "GUILLEMET";
		case sym.POINTEXCLAMATION : return "POINTEXCLAMATION";
		case sym.ACCOLADE_D : return "ACCOLADE_D";
		case sym.ACCOLADE_G : return "ACCOLADE_G";
		case sym.POINTVIRGULE : return "POINTVIRGULE";
		case sym.DEUXPOINTS : return "DEUXPOINTS";
		case sym.POINT: return "POINT";
		case sym.EGALE : return "EGALE";
		case sym.AFFECT : return "AFFECT";
		case sym.UNDERSCORE : return "UNDERSCORE";
		case sym.IDENT : return "IDENT";
		case sym.CROCHET_FERMANT : return "CROCHET_FERMANT";


		default : return "Token imprevu ou error";
		}
	}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



	// table identifiants appareils
	HashMap <String, String> hashAppareils = new HashMap <String, String>();
	// table declarations ensembles appareils
	HashMap <String, List<String>> hashEnsembleAppareils = new HashMap <String, List<String>>();
	// table declarations interfaces
	HashMap <String, String> hashInterfaces = new HashMap <String, String>();
	// table Scenarios
    LinkedHashMap <String, List<String>> declarationScenarios = new LinkedHashMap <String, List<String>>();
// table declaration commandes
	HashMap <String, List<String>> hashCommandes = new HashMap <String, List<String>>();
	// table programmation commandes
	HashMap <String, List<String>> hashProgCommandes = new HashMap <String, List<String>>();

	// table identifiants appareils
	HashMap <String, String> TableIdentAppareils = new HashMap <String, String>();
	// listes temporaires pour insertion dans les tables des symboles
	List<String> tempList= new ArrayList<String>();

	void exemple_de_fonction(String i1, String i2)
	{
		String m = "Erreur syntaxique <"+i2+"> au lieu de <"+i1+">";
		if (!(i1.equals(i2))) parser.report_error(m,null);	 
	if (!(i1.equals(i2))) parser.report_error(m,null);	 
		if (!(i1.equals(i2))) parser.report_error(m,null);	 
	}

	// Liste contenant les IDENT trouvés 
	//HashMap<String,Object> listeIdents = new HashMap<String,Object>();
	ArrayList<String> listeIdents = new ArrayList<String>();
	HashMap <String, List<String>> declarationEnsAppareils = new HashMap <String, List<String>>();


	// fonction dinsertion des appareils avec leur type
	public void insererTableIdentAppareils( String s){
		for(int i=0;i<listeIdents.size();i++){
			if(notExist(listeIdents.get(i), TableIdentAppareils)){
				TableIdentAppareils.put(listeIdents.get(i).toString(), s);
			}else{
				System.out.println("Erreur sémantique :  identifiant déja existant =>"+listeIdents.get(i));
			}		}
		tempList.clear();
	}

	// fonction dajout dune ou plusieurs appareils dans un ensemble de meme type
	public void insererDeclarationEnsAppareils(String s,List<String> l){
		List<String> temp = new ArrayList<String>();
		for(int i=0;i<l.size();i++){
			temp.add(l.get(i));
		}
		// verifier si lidentifiant de lensemble nexiste pas
		if(notExist(s,declarationEnsAppareils)){
			declarationEnsAppareils.put(s,temp);
		}
		tempList.clear();
	}

	// fonction permettant de verifier si un ident en parametre appartient à une table des symbole
	public boolean notExist(String s, HashMap table){
		if(table.containsKey(s)) return false;
		return true;
	}


	// generation code dans "CMaisonUser.java" : generation des Appareils - Interfaces - Scenarios - ...
	public void GenererCodeCMaisonUser(){
		String debut = " public class CMaisonUser extends CMaison { \n"+
		"\t public CMaisonUser() { \n"+
		"\t \t super(); \n \n \n";
		String fin = "\n \n \n \t \t monHabitat = new HabitatSpecific(ma_liste_appareils, \n"+
			"\t \t \t ma_liste_ens_appareils, ma_liste_scenarios,\n"+
				"\t \t \t \t ma_liste_interfaces, ma_liste_programmations);\n"+
	"\t }\n"+
	"}\n";
		writeIntoCMaisonUser(debut);

		//GenererCodeListeIdentifiantsAppareils();
		//GenererCodeListeEnsAppareils();
		
		writeIntoCMaisonUser(fin);
	}
	// ecriture dans le fichier CmaisonUser.java
	public static void writeIntoCMaisonUser(String s){
			try {

				// Open given file in append mode.
				BufferedWriter out = new BufferedWriter(
					new FileWriter("CMaisonUser.java", true));

				out.write(s);
				out.newLine();
				out.close();
			}
			catch (IOException e) {
				System.out.println("exception occured" + e);
			}
	}


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // domus ::= PROGRAMME_DOMUS_DEBUT prog PROGRAMME_DOMUS_FIN 
            {
              Object RESULT =null;
		 System.out.println("PROGRAMME_DOMUS_FIN OK"+parser.pline()+","+parser.pcolumn()); GenererCodeCMaisonUser(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("domus",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= domus EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // prog ::= dec_appareils dec_interfaces dec_scenarii dec_commandes 
            {
              Object RESULT =null;
		 System.out.println("PROG OK"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dec_appareils ::= DEC_APPAREILS_DEBUT listeDeclarationAppareils DEC_APPAREILS_FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_appareils",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // listeDeclarationAppareils ::= TYPE_APPAREIL liste_ident POINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationAppareils",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // listeDeclarationAppareils ::= TYPE_APPAREIL liste_ident POINT listeDeclarationAppareils 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationAppareils",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // listeDeclarationAppareils ::= liste_autres_appareils liste_ident POINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationAppareils",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // listeDeclarationAppareils ::= liste_autres_appareils liste_ident POINT listeDeclarationAppareils 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationAppareils",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // listeDeclarationAppareils ::= DEFINIR IDENT AFFECT ACCOLADE_G liste_ident ACCOLADE_D POINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationAppareils",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // listeDeclarationAppareils ::= DEFINIR IDENT AFFECT ACCOLADE_G liste_ident ACCOLADE_D POINT listeDeclarationAppareils 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationAppareils",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // liste_autres_appareils ::= AUTRE_APPAREIL PG TYPE_APPAREIL PD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("liste_autres_appareils",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // dec_interfaces ::= DEC_INTERFACES_DEBUT listeDeclarationInterfaces DEC_INTERFACES_FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_interfaces",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // listeDeclarationInterfaces ::= TYPE_INTERFACE listeInterfaces POINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationInterfaces",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // listeDeclarationInterfaces ::= TYPE_INTERFACE listeInterfaces POINT listeDeclarationInterfaces 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationInterfaces",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // listeInterfaces ::= IDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeInterfaces",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // listeInterfaces ::= IDENT VIRGULE listeInterfaces 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeInterfaces",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // dec_scenarii ::= DEC_SCENARII_DEBUT listeDeclarationScenariis DEC_SCENARII_FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_scenarii",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // listeDeclarationScenariis ::= DEC_SCENARIO_DEBUT IDENT CROCHET_FERMANT listeDeclarationScenarios DEC_SCENARIO_FIN IDENT CROCHET_FERMANT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenariis",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // listeDeclarationScenariis ::= DEC_SCENARIO_DEBUT IDENT CROCHET_FERMANT listeDeclarationScenarios DEC_SCENARIO_FIN IDENT CROCHET_FERMANT listeDeclarationScenariis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenariis",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // listeDeclarationScenarios ::= EXECUTER_SCENARIO IDENT POINTVIRGULE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenarios",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // listeDeclarationScenarios ::= EXECUTER_SCENARIO IDENT POINTVIRGULE listeDeclarationScenarios 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenarios",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // listeDeclarationScenarios ::= POURTOUT IDENT DEUXPOINTS categorie_appareils FAIRE action_ident POINTVIRGULE FAIT POINTVIRGULE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenarios",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // listeDeclarationScenarios ::= POURTOUT IDENT DEUXPOINTS categorie_appareils FAIRE action_ident POINTVIRGULE FAIT POINTVIRGULE listeDeclarationScenarios 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenarios",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // listeDeclarationScenarios ::= action_ident POINTVIRGULE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenarios",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // listeDeclarationScenarios ::= action_ident POINTVIRGULE listeDeclarationScenarios 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenarios",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // listeDeclarationScenarios ::= SI PG condition_ident PD ALORS action_ident POINTVIRGULE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenarios",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // listeDeclarationScenarios ::= SI PG condition_ident PD ALORS action_ident POINTVIRGULE listeDeclarationScenarios 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenarios",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // listeDeclarationScenarios ::= SI PG condition_ident PD ALORS MESSAGE PG contenu_message PD POINTVIRGULE FINSI POINTVIRGULE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenarios",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // listeDeclarationScenarios ::= SI PG condition_ident PD ALORS MESSAGE PG contenu_message PD POINTVIRGULE FINSI POINTVIRGULE listeDeclarationScenarios 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenarios",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // listeDeclarationScenarios ::= SI PG condition_ident PD ALORS action_ident POINTVIRGULE FINSI POINTVIRGULE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenarios",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // listeDeclarationScenarios ::= SI PG condition_ident PD ALORS action_ident POINTVIRGULE FINSI POINTVIRGULE listeDeclarationScenarios 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenarios",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // listeDeclarationScenarios ::= MESSAGE PG contenu_message PD POINTVIRGULE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenarios",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // listeDeclarationScenarios ::= MESSAGE PG contenu_message PD POINTVIRGULE listeDeclarationScenarios 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenarios",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // listeDeclarationScenarios ::= SINON MESSAGE PG contenu_message PD POINTVIRGULE FINSI POINTVIRGULE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenarios",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // listeDeclarationScenarios ::= SINON MESSAGE PG contenu_message PD POINTVIRGULE FINSI POINTVIRGULE listeDeclarationScenarios 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenarios",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // listeDeclarationScenarios ::= SINON MESSAGE PG contenu_message PD POINTVIRGULE FINSI POINTVIRGULE FINSI POINTVIRGULE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenarios",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // listeDeclarationScenarios ::= SINON MESSAGE PG contenu_message PD POINTVIRGULE FINSI POINTVIRGULE FINSI POINTVIRGULE listeDeclarationScenarios 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenarios",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // listeDeclarationScenarios ::= SINON action_ident POINTVIRGULE MESSAGE PG contenu_message PD POINTVIRGULE FINSI POINTVIRGULE FINSI POINTVIRGULE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenarios",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // listeDeclarationScenarios ::= SINON action_ident POINTVIRGULE MESSAGE PG contenu_message PD POINTVIRGULE FINSI POINTVIRGULE FINSI POINTVIRGULE listeDeclarationScenarios 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenarios",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // listeDeclarationScenarios ::= SINON action_ident POINTVIRGULE FINSI POINTVIRGULE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenarios",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // listeDeclarationScenarios ::= SINON action_ident POINTVIRGULE FINSI POINTVIRGULE listeDeclarationScenarios 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenarios",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // listeDeclarationScenarios ::= SINON action_ident POINTVIRGULE FINSI POINTVIRGULE FINSI POINTVIRGULE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenarios",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // listeDeclarationScenarios ::= SINON action_ident POINTVIRGULE FINSI POINTVIRGULE FINSI POINTVIRGULE listeDeclarationScenarios 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenarios",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // listeDeclarationScenarios ::= SINON SI MESSAGE PG condition_ident PD ALORS action_ident POINTVIRGULE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenarios",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // listeDeclarationScenarios ::= SINON SI MESSAGE PG condition_ident PD ALORS action_ident POINTVIRGULE listeDeclarationScenarios 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenarios",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // listeDeclarationScenarios ::= SINON SI PG condition_ident PD ALORS action_ident POINTVIRGULE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenarios",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // listeDeclarationScenarios ::= SINON SI PG condition_ident PD ALORS action_ident POINTVIRGULE listeDeclarationScenarios 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenarios",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // listeDeclarationScenarios ::= SINON SI PG condition_ident PD ALORS action_ident POINTVIRGULE FINSI POINTVIRGULE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenarios",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // listeDeclarationScenarios ::= SINON SI PG condition_ident PD ALORS action_ident POINTVIRGULE FINSI POINTVIRGULE listeDeclarationScenarios 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenarios",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // listeDeclarationScenarios ::= SINON SI PG condition_ident PD ALORS action_ident POINTVIRGULE FINSI POINTVIRGULE FINSI POINTVIRGULE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenarios",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // listeDeclarationScenarios ::= SINON SI PG condition_ident PD ALORS action_ident POINTVIRGULE FINSI POINTVIRGULE FINSI POINTVIRGULE listeDeclarationScenarios 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenarios",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // listeDeclarationScenarios ::= SI PG condition_ident PD ALORS MESSAGE PG contenu_message PD POINTVIRGULE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenarios",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // listeDeclarationScenarios ::= SI PG condition_ident PD ALORS MESSAGE PG contenu_message PD POINTVIRGULE listeDeclarationScenarios 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenarios",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // listeDeclarationScenarios ::= POURTOUT IDENT DEUXPOINTS categorie_appareils FAIRE MESSAGE PG contenu_message PD POINTVIRGULE FAIT POINTVIRGULE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenarios",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // listeDeclarationScenarios ::= POURTOUT IDENT DEUXPOINTS categorie_appareils FAIRE MESSAGE PG contenu_message PD POINTVIRGULE FAIT POINTVIRGULE listeDeclarationScenarios 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationScenarios",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // categorie_appareils ::= TYPE_APPAREIL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("categorie_appareils",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // categorie_appareils ::= AUTRE_APPAREIL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("categorie_appareils",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // categorie_appareils ::= AUTRE_APPAREIL PG TYPE_APPAREIL PD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("categorie_appareils",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // categorie_appareils ::= IDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("categorie_appareils",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // condition_ident ::= IDENT POINT ETAT EGALE ETAT_APPAREIL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition_ident",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // action_ident ::= IDENT POINT ACTION_APPAREIL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_ident",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // contenu_message ::= CHAINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("contenu_message",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // contenu_message ::= CHAINE VIRGULE IDENT VIRGULE contenu_message 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("contenu_message",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // contenu_message ::= CHAINE VIRGULE IDENT POINT ETAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("contenu_message",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // dec_commandes ::= DEC_COMMANDES_DEBUT listeDeclarationCommandes DEC_COMMANDES_FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_commandes",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // listeDeclarationCommandes ::= ASSOCIER IDENT AFFECT IDENT POINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationCommandes",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // listeDeclarationCommandes ::= ASSOCIER IDENT AFFECT IDENT POINT listeDeclarationCommandes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationCommandes",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // listeDeclarationCommandes ::= ASSOCIER IDENT AFFECT ACCOLADE_G liste_ident ACCOLADE_D POINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationCommandes",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // listeDeclarationCommandes ::= ASSOCIER IDENT AFFECT ACCOLADE_G liste_ident ACCOLADE_D POINT listeDeclarationCommandes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationCommandes",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // listeDeclarationCommandes ::= PROGRAMMER IDENT AFFECT liste_dates POINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationCommandes",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // listeDeclarationCommandes ::= PROGRAMMER IDENT AFFECT liste_dates POINT listeDeclarationCommandes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationCommandes",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // listeDeclarationCommandes ::= PROGRAMMER IDENT AFFECT ACCOLADE_G liste_dates ACCOLADE_D POINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationCommandes",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // listeDeclarationCommandes ::= PROGRAMMER IDENT AFFECT ACCOLADE_G liste_dates ACCOLADE_D POINT listeDeclarationCommandes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeDeclarationCommandes",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // liste_ident ::= IDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("liste_ident",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // liste_ident ::= IDENT VIRGULE liste_ident 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("liste_ident",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // liste_dates ::= PG entierOuUnderscore VIRGULE entierOuUnderscore VIRGULE entierOuUnderscore VIRGULE entierOuUnderscore VIRGULE ENTIER PD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("liste_dates",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // liste_dates ::= PG entierOuUnderscore VIRGULE entierOuUnderscore VIRGULE entierOuUnderscore VIRGULE entierOuUnderscore VIRGULE ENTIER PD VIRGULE liste_dates 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("liste_dates",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // entierOuUnderscore ::= ENTIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("entierOuUnderscore",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // entierOuUnderscore ::= UNDERSCORE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("entierOuUnderscore",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
